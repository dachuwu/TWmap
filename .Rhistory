}else if(geo.level == "town"){
bmap <- bord_town %>% rename(geo.code = town)
}else if(geo.level == "region"){
bmap <- bord_region %>% rename(geo.code = region)
}else if(geo.level == "nation"){
bmap <- bord_nation %>% rename(geo.code = nation)
}else if(geo.level == "urbanicity"){
bmap <- bord_urban %>% rename(geo.code = urb)
}else{
stop("fail to specify the geographic level argument : geo.level")
}
gdf <- bmap %>%
dplyr::left_join(data.frame(
geo.code = geo.code,
xv = x, stringsAsFactors = F
))
G <- ggplot2::ggplot(gdf)+
ggplot2::geom_sf(ggplot2::aes(fill = xv, geometry = geometry),
color = thm.ctrl$border, size=.1)+
ggplot2::coord_sf(xlim = c(118.4,123.3), ylim = c(21.85,25.35), ndiscr = 0)+
ggplot2::labs(x="",y="")+
ggplot2::theme(
plot.background = ggplot2::element_rect(fill = thm.ctrl$back, color = thm.ctrl$back),
plot.margin = ggplot2::unit(c(0,0,0,0), "cm"),
panel.background = ggplot2::element_blank(),
legend.background = ggplot2::element_blank(),
legend.justification = c(1.1,0),
legend.position = c(1, 0))
G +
ggplot2::scale_fill_viridis_c(option = col.ctrl$option, direction = col.ctrl$dir,
na.value = col.ctrl$na.color)+
ggplot2::guides(fill = ggplot2::guide_colorbar(title = x.name))
col.ctrl
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death",
col.control = list(option = "viridis", dir = -1),
thm.control = list(border = "white", back = "grey90"))
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death",
col.control = list(dir = -1),
thm.control = list(border = "white", back = "grey90"))
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death",
col.control = list(dir = -1),
thm.control = list(back = "grey60"))
View(dict_admin)
bmap <- bord_town %>% rename(geo.code = town)
geo.code
bmap <- bord_town %>% rename(geo.code = town)
View(bmap)
View(bmap%>%arrange(geo.code))
bmap <- bord_region %>% rename(geo.code = region)
View(bmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
browseVignettes("roxygen2")
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
http://127.0.0.1:35819/help/library/ggplot2/help/discrete_scale
http://127.0.0.1:35819/help/library/ggplot2/html/scale_colour_viridis_d.html
http://127.0.0.1:35819/help/library/viridis/html/scale_color_viridis.html
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death",
col.control = list(dir = -1),
thm.control = list(back = "grey60"))
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death",
col.control = list(dir = -1),
thm.control = list(back = "grey60"))
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death")
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = F)
### 3. township-specific measures (continuous scale)
df <- daly_B01 %>%
filter(sex == 0, cause_l3 == "B.01.07")%>%
mutate(xv = 1E5*daly_count/population)
TWmap::twmap_static(geo.code = df$town, x = df$xv,
geo.level = "town", x.name = "YLD rate per 100,000")
### 3. township-specific measures (discrete scale)
df <- df %>%
mutate(
xv_d = cut(xv, breaks = c(0,  1000, 2000, 3000, 4000, Inf),
labels = c("0~1000", "1000~2000", "2000~3000","3000~4000", "4000+"))
)
TWmap::twmap_static(geo.code = df$town, x = df$xv_d,
geo.level = "town", x.name = "YLD rate per 100,000")
library(TWmap)
### 3. township-specific measures (discrete scale)
df <- df %>%
mutate(
xv_d = cut(xv, breaks = c(0,  1000, 2000, 3000, 6000, Inf),
labels = c("0~1000", "1000~2000", "2000~3000","3000~4000", "6000+"))
)
TWmap::twmap_static(geo.code = df$town, x = df$xv_d,
geo.level = "town", x.name = "YLD rate per 100,000")
df <- df %>%
mutate(
xv_d = cut(xv, breaks = c(0,  1000, 2000, 3000, 6000, Inf),
labels = c("0~1000", "1000~2000", "2000~3000","3000~4000", "6000+"))
)
TWmap::twmap_static(geo.code = df$town, x = df$xv_d,
geo.level = "town", x.name = "YLD rate per 100,000")
### 3. township-specific measures (discrete scale)
df <- df %>%
mutate(
xv_d = cut(xv, breaks = c(0,  1000, 2000, 3000, 6000, Inf),
labels = c("0~1000", "1000~2000", "2000~3000","3000~4000", "6000+"))
)
TWmap::twmap_static(geo.code = df$town, x = df$xv_d,
geo.level = "town", x.name = "YLD rate per 100,000")
### 3. township-specific measures (continuous scale)
df <- daly_B01 %>%
filter(sex == 0, cause_l3 == "B.01.07")%>%
mutate(xv = 1E5*daly_count/population)
TWmap::twmap_static(geo.code = df$town, x = df$xv,
geo.level = "town", x.name = "YLD rate per 100,000")
### 3. township-specific measures (discrete scale)
df <- df %>%
mutate(
xv_d = cut(xv, breaks = c(0,  1000, 2000, 3000, 6000, Inf),
labels = c("0~1000", "1000~2000", "2000~3000","3000~4000", "6000+"))
)
TWmap::twmap_static(geo.code = df$town, x = df$xv_d,
geo.level = "town", x.name = "YLD rate per 100,000")
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = F)
TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
### 2. county-specific measures (discrete scale)
df <- df%>%
mutate(
xv_d = cut(xv, breaks = seq(0, 700, 100))
)
TWmap::twmap_static(geo.code = df$county, x = df$xv_d,
geo.level = "county", x.name = "all_att_death")
df <- daly_B01
unique(df$year)
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
map <- TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
class(map)
filename = "tmp.jpeg"
filename = "tmp"
fname<- tmp
fname<- "tmp"
fp <- paste0(fname, ".jpeg")
ggsave(filename = fp, plot = map, scale = 1, dpi = 300, units = "cm",
width = 30, height = 21)
ggsave(filename = fp, plot = map, scale = 2, dpi = 300, units = "cm",
width = 30, height = 21)
ggsave(filename = fp, plot = map, scale = 1, dpi = 350, units = "cm",
width = 29, height = 21)
library(TWmap)
roxygen2::roxygenize()
library(TWmap)
tmp <- data.frame(
xv = factor(c("a","b"), levels = c("a","b","c")), stringsAsFactors = F
)
tmp <- data.frame(
x = 1:100,
val = rnorm(100),
xv = factor(sample(c("a","b"), 100, replace = T), levels = c("a","b","c")), stringsAsFactors = F
)
require(ggplot2)
ggplot(tmp)+
geom_point(aes(x=x, y=val, color=xv))
ggplot(tmp)+
geom_point(aes(x=x, y=val, color=xv))+
scale_color_discrete(drop=F)
tmp <- data.frame(
x = 1:100,
val = rnorm(100),
xv = factor(sample(c("a","b"), 100, replace = T), levels = c("a","b","c")), stringsAsFactors = F
)
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
map <- TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
library(TWmap)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
map <- TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
library(dplyr)
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
map <- TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
map
### 1. county-specific measures (continuous scale)
df <- attri_death_pm25%>%
dplyr::mutate(county = substr(town, 1, 5))%>%
dplyr::group_by(county)%>%
dplyr::summarise(xv = sum(all_att_death))%>%
ungroup()
map <- TWmap::twmap_static(geo.code = df$county, x = df$xv,
geo.level = "county", x.name = "all_att_death", show.island = T)
map
### 2. county-specific measures (discrete scale)
df <- df%>%
mutate(
xv_d = cut(xv, breaks = seq(0, 700, 100))
)
TWmap::twmap_static(geo.code = df$county, x = df$xv_d,
geo.level = "county", x.name = "all_att_death")
### 2. county-specific measures (discrete scale)
df <- df%>%
mutate(
xv_d = cut(xv, breaks = seq(-110, 700, 100))
)
TWmap::twmap_static(geo.code = df$county, x = df$xv_d,
geo.level = "county", x.name = "all_att_death")
View(df)
### 2. county-specific measures (discrete scale)
df <- df%>%
mutate(
xv_d = cut(xv, breaks = seq(-100, 700, 100))
)
TWmap::twmap_static(geo.code = df$county, x = df$xv_d,
geo.level = "county", x.name = "all_att_death")
View(df)
View(df)
load(file = "raw-test/TWmap_demo_data.RData")
load(file = "test/TWmap_demo_data.RData")
load(file = "prep_data/TWmap_raw_data.RData")
load(file = "prep_data/TWmap_raw_data.RData")
usethis::use_data(dict_admin, overwrite = T)
usethis::use_data(bord_nation, overwrite = T)
usethis::use_data(bord_county, overwrite = T)
usethis::use_data(bord_region, overwrite = T)
usethis::use_data(bord_town, overwrite = T)
usethis::use_data(bord_urban, overwrite = T)
usethis::use_data(bord_seg, overwrite = T)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
View(pop)
require(dplyr)
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3)
)
dict_admin
moh2moi <- structure(dict_admin$town_moi, names = dict_admin$town_moh)
moh2moi
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0)
town = dict_admin[Town]
)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = dict_admin[Town]
)
moh2moi
moh2moi <- structure(dict_admin$town_moi, names = dict_admin$town_moh)
moh2moi <- structure(dict_admin$town_moi, names = dict_admin$town_moh)
require(dplyr)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town]
)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)
View(pop)
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
require(dplyr)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
pop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
####
all(!is.na(pop$population))
require(dplyr)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
TWpop <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
all(!is.na(pop$population))
usethis::use_data(TWpop, overwrite = T)
View(TWpop)
pop <- readRDS("prep_data/TBDC_population_template.RDS")
TWpop_town <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
TWpop_city <- TWpop_town%>%
mutate(city = substr(town, 1, 5))%>%
group_by(age, sex, city, year)%>%
summarise(population = sum(population)) %>%
ungroup()
14256*368
14256*368/22
all(!is.na(TWpop_city$population))
View(TWpop_city)
ind <- !duplicated(dict_admin$city_moi)
ind <- !duplicated(dict_admin$city_moi)
moi2reg <- structure(dict_admin$region[ind], names = dict_admin$city_moi[ind])
moi2reg
TWpop_city%>%
mutate(region = moi2reg[city])
TWpop_region <- TWpop_city%>%
mutate(region = moi2reg[city])%>%
group_by(age, sex, region, year)%>%
summarise(population = sum(population)) %>%
ungroup()
TWpop_region
all(!is.na(TWpop_region$population))
View(TWpop_region)
usethis::use_data(TWpop_town, overwrite = T)
usethis::use_data(TWpop_city, overwrite = T)
usethis::use_data(TWpop_region, overwrite = T)
df <- read.csv("prep_data/cause_outline_to_name_chn.csv")
View(df)
df <- read.csv("prep_data/cause_outline_to_name_chn.csv")
View(df)
df <- read.csv("prep_data/cause_outline_to_name_chn.csv", stringsAsFactors = F)
dict_cause <- read.csv("prep_data/cause_outline_to_name_chn.csv", stringsAsFactors = F)
usethis::use_data(dict_cause, overwrite = T)
dict_cause <- read.csv("prep_data/cause_outline_to_name_chn.csv", stringsAsFactors = F)
colnames(dict_cause)
colnames(dict_cause)[7] <- "cause_name_ch"
usethis::use_data(dict_cause, overwrite = T)
roxygen2::roxygenize()
library(TWmap)
require(dplyr)
pop <- readRDS("extdata/TBDC_population_template.RDS")
TWpop_town <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
load(file = "extdata/TWmap_raw_data.RData")
moh2moi <- structure(dict_admin$town_moi, names = dict_admin$town_moh)
ind <- !duplicated(dict_admin$city_moi)
moi2reg <- structure(dict_admin$region[ind], names = dict_admin$city_moi[ind])
pop <- readRDS("extdata/TBDC_population_template.RDS")
TWpop_town <- pop %>%
mutate(
age = purrr::map(strsplit(AgeGroup, ","), 1) %>% substr(2,3) %>% as.integer(),
sex = ifelse(Sex == "male" , 1, 0),
town = moh2moi[Town],
year= Year
) %>%
select(age, sex, town, year, population)%>%
group_by(age, sex, town, year)%>%
summarise(population = sum(population)) %>%
ungroup()
View(TWpop_town)
duplicated(TWpop_town[,c("age","sex","town")])
duplicated(TWpop_town[,c("age","sex","town","year")])
any(duplicated(TWpop_town[,c("age","sex","town","year")]))
any(duplicated(TWpop_town[,c("age","sex","town","year")]))
TWpop_city <- TWpop_town%>%
mutate(city = substr(town, 1, 5))%>%
group_by(age, sex, city, year)%>%
summarise(population = sum(population)) %>%
ungroup()
any(duplicated(TWpop_town[,c("age","sex","city","year")]))
any(duplicated(TWpop_city[,c("age","sex","city","year")]))
View(TWpop_city)
TWpop_region <- TWpop_city%>%
mutate(region = moi2reg[city])%>%
group_by(age, sex, region, year)%>%
summarise(population = sum(population)) %>%
ungroup()
all(!is.na(TWpop_region$population))
any(duplicated(TWpop_region[,c("age","sex","region","year")]))
usethis::use_data(TWpop_town, overwrite = T)
usethis::use_data(TWpop_city, overwrite = T)
usethis::use_data(TWpop_region, overwrite = T)
dict_cause <- read.csv("prep_data/cause_outline_to_name_chn.csv", stringsAsFactors = F)
dict_cause <- read.csv("extdata/cause_outline_to_name_chn.csv", stringsAsFactors = F)
View(dict_cause)
### standard population
stand_pop <- read.csv("extdata/TBDC_ref_age_standard_population2.csv", stringsAsFactors = F)
View(stand_pop)
stand_pop$age1
lapply(strsplit(stand_pop$age1,","),`[[`,1)
strsplit(stand_pop$age1,",")
lapply(strsplit(stand_pop$age1[1:18],","),`[[`,1)
stand_pop$age1[1:18] <- lapply(strsplit(stand_pop$age1[1:18],","),`[[`,1)
stand_pop$age1 <- as.integer(substr(stand_pop$age1,2,3))
View(stand_pop)
stand_pop <- read.csv("extdata/TBDC_ref_age_standard_population2.csv", stringsAsFactors = F)
stand_pop$age3 <- stand_pop$age1
stand_pop$percent3 <- stand_pop$percent1
stand_pop$age3[1:18] <- lapply(strsplit(stand_pop$age3[1:18],","),`[[`,1)
stand_pop$age3 <- as.integer(substr(stand_pop$age3,2,3))
View(stand_pop)
usethis::use_data(stand_pop, overwrite = T)
colnames(stand_pop)
roxygen2::roxygenize()
library(TWmap)
